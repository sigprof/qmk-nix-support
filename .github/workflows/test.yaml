# This workflow attempts to test `shell.nix` in the specified forks and
# branches of the `qmk_firmware` repository by trying to build some firmwares
# using that environment.
#
# Expected repository configuration variables:
#   - `CACHIX_NAME`:
#     The Cachix cache name.
#
# Expected repository secrets:
#   - `CACHIX_AUTH_TOKEN`:
#     The Cachix auth token which grants write permissions to the cache
#     specified in `CACHIX_NAME`.

name: Test Nix shell
on:
  workflow_dispatch:
    inputs:
      source:
        description: 'Branch (user[/repo]:branch)'
        type: string
        required: false
      os:
        description: 'Machine type'
        type: string
        required: false
  schedule:
    - cron: '35 4 * * *'

jobs:
  # The `setup` job determines the strategy for the real build job.
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      strategy: ${{ steps.strategy.outputs.result }}
    steps:
      - id: strategy
        name: Determine build strategy
        uses: actions/github-script@v7.0.1
        with:
          script: |
            // Default settings.
            const defaultSource = [
              { repo: "qmk/qmk_firmware", branch: "master" },
              { repo: "qmk/qmk_firmware", branch: "develop" },
              { repo: "sigprof/qmk_firmware", branch: "nix-shell-updates" },
              { repo: "sigprof/qmk_firmware", branch: "nix-shell-updates-develop" },
            ];
            const defaultOS = [
              "ubuntu-latest",
              "macos-latest",
            ];

            // Read workflow inputs.
            let inputSource = "";
            let inputOS = "";
            if (context.eventName == "workflow_dispatch") {
              const payload = context.payload;
              const inputs = payload && payload.inputs;
              inputSource = inputs && inputs.source && inputs.source.trim() || "";
              inputOS = inputs && inputs.os && inputs.os.trim() || "";
            }

            // Parse the `source` input.
            let matrixSource = defaultSource;
            if (inputSource != "") {
              const sourceParts = inputSource.split(":", 2);
              if (sourceParts.length == 2 ) {
                let repoParts = sourceParts[0].split("/", 2);
                if (repoParts.length == 1) {
                  repoParts.push("qmk_firmware");
                }
                matrixSource = [
                  { repo: repoParts.join("/"), branch: sourceParts[1] },
                ];
              }
            }

            // Parse the `os` input.
            let matrixOS = defaultOS;
            if (inputOS != "") {
              matrixOS = [ inputOS ];
            }

            // Determine build strategy.
            const strategy = {
              "fail-fast": false,
              "matrix": {
                "source": matrixSource,
                "os": matrixOS,
              },
            };

            // Print the resulting strategy to the log.
            core.startGroup("Job strategy:");
            core.info(JSON.stringify(strategy, null, 2));
            core.endGroup();

            // Return the strategy as the step output in the JSON format.
            return strategy;

  test:
    needs: setup
    strategy: ${{ fromJSON(needs.setup.outputs.strategy) }}

    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Nix
        uses: cachix/install-nix-action@v26
        with:
          # `nix-shell` gets `bashInteractive` from `<nixpkgs>`, so a valid
          # `NIX_PATH` is required (there is a fallback to whatever `bash`
          # binary is found in `$PATH`, but it might be a wrong version).
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Show nixpkgs version
        run: nix-instantiate --eval -E '(import <nixpkgs> {}).lib.version'

      - name: Setup Cachix
        uses: cachix/cachix-action@v14
        with:
          name: ${{ vars.CACHIX_NAME }}
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Checkout the QMK source code
        uses: actions/checkout@v4.1.3
        with:
          repository: ${{ matrix.source.repo }}
          ref: ${{ matrix.source.branch }}
          submodules: recursive

      - name: Build the Nix shell environment
        id: nix_shell
        run: nix-shell --show-trace --run 'true'

      - name: Update submodules
        run: nix-shell --run 'make git-submodule'

      - name: Test AVR build using 'make'
        if: ${{ always() && (steps.nix_shell.outcome == 'success') }}
        run: nix-shell --run 'make planck/rev5:default'

      - name: Test Arm build using 'make'
        if: ${{ always() && (steps.nix_shell.outcome == 'success') }}
        run: nix-shell --run 'make planck/rev6:default'

      - name: Test 'make clean'
        if: ${{ always() && (steps.nix_shell.outcome == 'success') }}
        run: nix-shell --run 'make clean'

      - name: Force clean before testing 'qmk compile'
        if: ${{ always() && (steps.nix_shell.outcome == 'success') }}
        run: git clean -fdx

      - name: Test AVR build using 'qmk compile'
        if: ${{ always() && (steps.nix_shell.outcome == 'success') }}
        run: nix-shell --run 'qmk compile -kb planck/rev5 -km default'

      - name: Test Arm build using 'qmk compile'
        if: ${{ always() && (steps.nix_shell.outcome == 'success') }}
        run: nix-shell --run 'qmk compile -kb planck/rev6 -km default'

      - name: Test 'qmk clean'
        if: ${{ always() && (steps.nix_shell.outcome == 'success') }}
        run: nix-shell --run 'qmk clean'
