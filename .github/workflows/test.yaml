# This workflow attempts to test `shell.nix` in the specified forks and
# branches of the `qmk_firmware` repository by trying to build some firmwares
# using that environment.
#
# Expected repository secrets:
#   - `CACHIX_SETTINGS_JSON`:
#     A JSON object which contains the Cachix cache name under the `name` key:
#         {"name": "CACHE-NAME"}
#     This roundabout representation is used to keep the Cachix cache name
#     intact in logs (normally GitHub will redact any string which matches a
#     secret value, but with the added JSON encoding GitHub will not redact any
#     data extracted from that JSON).
#
#   - `CACHIX_AUTH_TOKEN`:
#     The Cachix auth token which grants write permissions to the cache
#     specified in `CACHIX_SETTINGS_JSON`.

name: Test Nix shell
on:
  workflow_dispatch:
  schedule:
    - cron: '35 4 * * *'

jobs:
  test:
    strategy:
      matrix:
        source:
          - { repo: "qmk/qmk_firmware", branch: "master" }
          - { repo: "sigprof/qmk_firmware", branch: "nix-shell-updates" }
        os:
          - ubuntu-latest
          - macos-10.15
          - macos-11
      fail-fast: false

    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Nix
        uses: cachix/install-nix-action@v16
        with:
          # `nix-shell` gets `bashInteractive` from `<nixpkgs>`, so a valid
          # `NIX_PATH` is required (there is a fallback to whatever `bash`
          # binary is found in `$PATH`, but it might be a wrong version).
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Show nixpkgs version
        run: nix-instantiate --eval -E '(import <nixpkgs> {}).lib.version'

      - name: Setup Cachix
        uses: cachix/cachix-action@v10
        with:
          name: ${{ fromJSON(secrets.CACHIX_SETTINGS_JSON).name }}
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Checkout the QMK source code
        uses: actions/checkout@v2.4.0
        with:
          repository: ${{ matrix.source.repo }}
          ref: ${{ matrix.source.branch }}
          submodules: recursive

      - name: Update submodules
        run: make git-submodule

      - name: Build the Nix shell environment
        id: nix_shell
        run: nix-shell --run 'true'

      - name: Test AVR build using 'make'
        if: ${{ always() && (steps.nix_shell.outcome == 'success') }}
        run: nix-shell --run 'make planck/rev5:default'

      - name: Test Arm build using 'make'
        if: ${{ always() && (steps.nix_shell.outcome == 'success') }}
        run: nix-shell --run 'make planck/rev6:default'

      - name: Test 'make clean'
        if: ${{ always() && (steps.nix_shell.outcome == 'success') }}
        run: nix-shell --run 'make clean'

      - name: Force clean before testing 'qmk compile'
        if: ${{ always() && (steps.nix_shell.outcome == 'success') }}
        run: git clean -fdx

      - name: Test AVR build using 'qmk compile'
        if: ${{ always() && (steps.nix_shell.outcome == 'success') }}
        run: nix-shell --run 'qmk compile -kb planck/rev5 -km default'

      - name: Test Arm build using 'qmk compile'
        if: ${{ always() && (steps.nix_shell.outcome == 'success') }}
        run: nix-shell --run 'qmk compile -kb planck/rev6 -km default'

      - name: Test 'qmk clean'
        if: ${{ always() && (steps.nix_shell.outcome == 'success') }}
        run: nix-shell --run 'qmk clean'
