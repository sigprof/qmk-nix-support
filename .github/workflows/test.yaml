name: Test Nix shell
on:
  workflow_dispatch:
  schedule:
    - cron: '35 4 * * *'

jobs:
  test:
    strategy:
      matrix:
        source:
          - { repo: "qmk/qmk_firmware", branch: "master" }
          - { repo: "sigprof/qmk_firmware", branch: "nix-shell-updates" }
        nixPath:
          - nixpkgs=channel:nixos-20.09
          # nixpkgs=channel:nixos-unstable
      fail-fast: false

    runs-on: ubuntu-latest
    steps:
      - name: Install Nix
        uses: cachix/install-nix-action@v13
        with:
          nix_path: "${{ matrix.nixPath }}"

      - name: Show nixpkgs version
        run: nix-instantiate --eval -E '(import <nixpkgs> {}).lib.version'

      - name: Setup Cachix
        uses: cachix/cachix-action@v10
        with:
          name: ${{ secrets.CACHIX_NAME }}
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Checkout the QMK source code
        uses: actions/checkout@v2.3.4
        with:
          repository: ${{ matrix.source.repo }}
          ref: ${{ matrix.source.branch }}
          submodules: recursive

      - name: Update submodules
        run: make git-submodule

      - name: Build the Nix shell environment
        run: nix-shell --run 'true'

      - name: Test AVR build using 'make'
        run: nix-shell --run 'make planck/rev5:default'

      - name: Test Arm build using 'make'
        run: nix-shell --run 'make planck/rev6:default'

      - name: Test 'make clean'
        run: nix-shell --run 'make clean'

      - name: Force clean before testing 'qmk compile'
        run: git clean -fdx

      - name: Test AVR build using 'qmk compile'
        run: nix-shell --run 'qmk compile -kb planck/rev5 -km default'

      - name: Test Arm build using 'qmk compile'
        run: nix-shell --run 'qmk compile -kb planck/rev6 -km default'

      - name: Test 'qmk clean'
        run: nix-shell --run 'qmk clean'
